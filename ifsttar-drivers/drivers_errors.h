#ifndef DRIVERS_ERRORS_H
#define DRIVERS_ERRORS_H

// ifsttar-synchronization-drv (1000-1199)
	// static unsigned int ComputeMicroSecond (unsigned int bSelectedTimer)
	#define	ERR_SYNCHRONIZATION_COMPUTEMICROSECOND_SPECIFIED_TIMER				1001
	// static int SetGpsStatus (unsigned int bGpsDriverStatus)
	#define	ERR_SYNCHRONIZATION_SETGPSSTATUS_SPECIFIED_STATUS					1021
	// long Synchronization_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
	#define	ERR_SYNCHRONIZATION_IOCTL_COPY_OFFICIAL_GDDATA_TO_USER				1041
	#define	ERR_SYNCHRONIZATION_IOCTL_COPY_TEMPORARY_GPSDATA_FROM_USER			1042
	#define	ERR_SYNCHRONIZATION_IOCTL_SPECIFIED_MODE							1043
	#define	ERR_SYNCHRONIZATION_IOCTL_SPECIFIED_GPS_OFF_TIME					1044
	#define	ERR_SYNCHRONIZATION_IOCTL_SPECIFIED_IOCTL_COMMAND					1045
	// static int PpsTimerConfiguration (void)
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_MUX_REQUEST				1061
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_REQUEST				1062
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_SET_SRC_CLK			1063
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_GET_SRC_CLK			1064
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_SET_CAPTURE			1065
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_SET_LOAD			1066
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_CLEAR_INT			1067
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_REQUEST_IRQ				1068
	#define	ERR_SYNCHRONIZATION_PPSTIMERCONFIGURATION_TIMER_SET_INT				1069
	// static int RelayTimerConfiguration (void)
	#define	ERR_SYNCHRONIZATION_RELAYTIMERCONFIGURATION_TIMER_REQUEST			1081
	#define	ERR_SYNCHRONIZATION_RELAYTIMERCONFIGURATION_TIMER_SET_SRC_CLK		1082
	#define	ERR_SYNCHRONIZATION_RELAYTIMERCONFIGURATION_TIMER_GET_SRC_CLK		1083
	#define	ERR_SYNCHRONIZATION_RELAYTIMERCONFIGURATION_TIMER_CLEAR_INT			1084
	#define	ERR_SYNCHRONIZATION_RELAYTIMERCONFIGURATION_REQUEST_IRQ				1085
	#define	ERR_SYNCHRONIZATION_RELAYTIMERCONFIGURATION_TIMER_SET_INT			1086
	// static int GpsSoftwareShutdownGpioConfiguration (void)
	#define	ERR_SYNCHRONIZATION_GPSSHUTDOWNGPIOCONFIGURATION_MUX_REQUEST		1101
	#define	ERR_SYNCHRONIZATION_GPSSHUTDOWNGPIOCONFIGURATION_GPIO_REQUEST		1102
	#define	ERR_SYNCHRONIZATION_GPSSHUTDOWNGPIOCONFIGURATION_GPIO_SET_DIRECTION	1103
	// int __init Synchronization_initialize(void)
	#define	ERR_SYNCHRONIZATION_INIT_ALLOC_CHRDEV_REGION						1121
	#define	ERR_SYNCHRONIZATION_INIT_CDEV_ADD									1122
	#define	ERR_SYNCHRONIZATION_INIT_CLASS_CREATE								1123
	#define	ERR_SYNCHRONIZATION_INIT_DEVICE_CREATE								1124
	#define	ERR_SYNCHRONIZATION_INIT_CREATE_PROC_ENTRY							1125


// ifsttar-gpio-drv (1200-1399)
	// static int SaveDefaultMode (void)
	#define	ERR_GPIO_SAVEDEFAULTMODE_MUX_REQUEST								1201
	// static int ForceGpioMode (unsigned int uiGpioNumber, int iRegisterToMux)
	#define	ERR_GPIO_FORCEGPIOMODE_MUX_UNAVAILABLE								1221
	#define	ERR_GPIO_FORCEGPIOMODE_MUX_REQUEST									1222
	// static int RestorePreviousGpioMode (unsigned int uiGpioNumber)
	#define	ERR_GPIO_RESTOREPREVIOUSGPIOMODE_MUX_REQUEST						1241
	// static int RestoreAllChangedMux (void)
	#define	ERR_GPIO_RESTOREALLCHANGEDMUX_MUX_REQUEST							1261
	// static int Gpio_open (struct inode * inode, struct file * filp)
	#define	ERR_GPIO_OPEN_WRONG_MINOR											1281
	#define	ERR_GPIO_OPEN_GPIO_BUSY_IN_DRIVER									1282
	#define	ERR_GPIO_OPEN_GPIO_BUSY_OUT_DRIVER									1283
	#define	ERR_GPIO_OPEN_GPIO_SET_DIRECTION_INPUT								1284
	#define	ERR_GPIO_OPEN_GPIO_SET_DIRECTION_OUTPUT								1285
	// static int Gpio_close (struct inode * inode, struct file * filp)
	#define	ERR_GPIO_CLOSE_WRONG_MINOR											1301
	// static ssize_t Gpio_read (struct file * filp, char * buf, size_t size, loff_t * offp)
	#define	ERR_GPIO_READ_WRONG_MINOR											1321
	#define	ERR_GPIO_READ_SPECIFIED_SIZE										1322
	#define	ERR_GPIO_READ_WRONG_GPIO_DIRECTION									1323
	#define	ERR_GPIO_READ_WRONG_GPIO_MODE										1324
	#define	ERR_GPIO_READ_WRONG_READED_BYTES									1325
	// static ssize_t Gpio_write (struct file * filp, const char * buf, size_t size, loff_t * offp)
	#define	ERR_GPIO_WRITE_WRONG_MINOR											1341
	#define	ERR_GPIO_WRITE_SPECIFIED_SIZE										1342
	#define	ERR_GPIO_WRITE_SPECIFIED_BUFFER										1343
	#define	ERR_GPIO_WRITE_WRONG_GPIO_MODE										1344
	#define	ERR_GPIO_WRITE_WRONG_GPIO_DIRECTION									1345
	// long Gpio_ioctl (struct file * file, unsigned int cmd, unsigned long arg)
	#define	ERR_GPIO_IOCTL_WRONG_GPIO_MODE										1361
	#define	ERR_GPIO_IOCTL_WRONG_GPIO_DIRECTION									1362
	#define	ERR_GPIO_IOCTL_INTERRUPTION_REQUEST									1363
	#define	ERR_GPIO_IOCTL_SPECIFIED_DIRECTION									1364
	#define	ERR_GPIO_IOCTL_SPECIFIED_OUTPUT_VALUE								1365
	#define	ERR_GPIO_IOCTL_SPECIFIED_EVENT										1366
	#define	ERR_GPIO_IOCTL_SPECIFIED_DEBOUNCE_VALUE								1367
	#define	ERR_GPIO_IOCTL_SPECIFIED_IOCTL_COMMAND								1368
	#define	ERR_GPIO_IOCTL_COPY_GDDATA_TO_USER									1369
	// static int __init Gpio_initialize (void)
	#define	ERR_GPIO_INIT_ALLOC_CHRDEV_REGION									1381
	#define	ERR_GPIO_INIT_CDEV_ADD												1382
	#define	ERR_GPIO_INIT_CLASS_CREATE											1383
	#define	ERR_GPIO_INIT_DEVICE_CREATE											1381


// ifsttar-spi-drv (1400-1599)
	//

#endif // SDK_ERRORS_H
